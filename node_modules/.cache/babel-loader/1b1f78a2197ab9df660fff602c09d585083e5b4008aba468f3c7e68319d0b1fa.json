{"ast":null,"code":"var _jsxFileName = \"E:\\\\React_data\\\\React_pratice\\\\todoapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State Hook - `useState`\n  const [newItem, setNewItem] = useState(\"\");\n  const [items, setItems] = useState([]);\n  const [showEdit, setShowEdit] = useState(-1);\n  const [updatedText, setUpdatedText] = useState(\"\");\n\n  // Helper Functions\n\n  /* Adds a new item to the list array*/\n  function addItem() {\n    // ! Check for empty item\n    if (!newItem) {\n      alert(\"Press enter an item.\");\n      return;\n    }\n    const item = {\n      id: Math.floor(Math.random() * 1000),\n      value: newItem\n    };\n\n    // Add new item to items array\n    setItems(oldList => [...oldList, item]);\n\n    // Reset newItem back to original state\n    setNewItem(\"\");\n  }\n\n  /* Deletes an item based on the `item.id` key */\n  function deleteItem(id) {\n    const newArray = items.filter(item => item.id !== id);\n    setItems(newArray);\n  }\n\n  /* Edit an item text after creating it. */\n  function editItem(id, newText) {\n    // Get the current item\n    const currentItem = items.filter(item => item.id === id);\n\n    // Create a new item with same id\n    const newItem = {\n      id: currentItem.id,\n      value: newText\n    };\n    deleteItem(id);\n\n    // Replace item in the item list\n    setItems(oldList => [...oldList, newItem]);\n    setShowEdit(-1);\n  }\n\n  // Main part of app\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My Todo List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Add an item...\",\n      value: newItem,\n      onChange: e => setNewItem(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addItem(),\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: items.map(item => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => setShowEdit(item.id),\n            children: [item.value, /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"delete-button\",\n              onClick: () => deleteItem(item.id),\n              children: \"\\u274C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this)]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), showEdit == item.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: updatedText,\n              onChange: e => setUpdatedText(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => editItem(item.id, updatedText),\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Bb2tC5d51+C29qCgtkKWFB3Z330=\");\n_c = App;\nexport default App;\n\n// import React,{ useState } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n\n//   //state -Hooks usestate\n//   const [newItem, setNewItem] = useState(\"\");\n//   const [items, setItems] = useState([]);\n//   //update\n//   const [updateitem, setUpdateItem] = useState(\"\");\n//   const [editShow, setShowEdit] = useState(-1);\n\n//   const handleChange = (e) => {\n//     const value = e.target.value;\n//     setNewItem(value);\n//   };\n\n//   //edit\n//   const edit=(id,newText)=>{\n//     const current=items.filter((item)=>item.id===id);\n//     const item={\n// id:current.id,\n// value:newText,\n//     }\n// deleteItem(id);\n\n// setItems((oldItem)=>[...oldItem,item]);\n// setUpdateItem(\"\");\n// setShowEdit(-1);\n//   }\n\n//   //helper function\n//   const addset = () => {\n//     if (!newItem) {\n//       alert(\"Enter an Item.\");\n//       return;\n//     }\n//     const item = {\n//       id: Math.floor(Math.random() * 1000),\n//       value: newItem,\n//     };\n//     setItems((oldItem) => [...oldItem, item]);\n\n//     setNewItem(\"\");\n//   };\n//   /// Enter key through submit \n//   const keySubmit = (e) => {\n//     if (e.key === \"Enter\") {\n//       addset();\n//     }\n//   };\n\n//   ///Delete function\n//   const deleteItem = (id) => {\n//     const NewArray = items.filter((item) => item.id !== id);\n//     setItems(NewArray);\n//   };\n//   return (\n//     <div className=\"App\">\n//       {/* Header */}\n//       <h1>Todo List App</h1>\n//       {/* Input Field */}\n//       {editShow===-1?<div><input\n//       type=\"text\"\n//       name=\"name\"\n//       id=\"txtfield\"\n//       onKeyPress={keySubmit}\n//       onChange={handleChange}\n//       placeholder=\"Add an item..\"\n//       value={newItem || \"\"}\n//     ></input>\n//     <button onClick={(e) => addset()}>Add</button>\n//     </div>:\n// console.log(updateitem)\n//       //  <div>\n\n//       //  <input type=\"text\" \n//       //  value={updateitem}\n//       //  onChange={(e)=>setUpdateItem(e.target.value)}\n\n//       //  ></input>\n//       //  <button onClick={() => edit(items.id, updateitem)}>\n//       //               Update\n//       //             </button> \n//       // </div>\n\n//        }\n\n//       {/* <input\n//         type=\"text\"\n//         name=\"name\"\n//         id=\"txtfield\"\n//         onKeyPress={keySubmit}\n//         onChange={handleChange}\n//         placeholder=\"Add an item..\"\n//         value={newItem || \"\"}\n//       ></input>\n\n//       <button onClick={(e) => addset()}>Add</button> */}\n//       {/* Unordered List */}\n\n//       <ul>\n\n//         {\n//         items.map((item) => {\n//         return(  \n//             <div>\n//             <li key={item.id} >\n//             {item.value}\n//             <button className=\"btn-del\" onClick={() => setShowEdit(item.id)}>\n//             üìò\n//             </button> \n//             <button className=\"btn-del\" onClick={() => deleteItem(item.id)}>\n//               ‚ùå\n//             </button>\n//           </li>\n//           {/* {editShow===item.id ?\n//       <div>\n//        <input type=\"text\" \n//        value={updateitem}\n//        onChange={(e)=>setUpdateItem(e.target.value)}\n\n//        ></input>\n//        <button onClick={() => edit(item.id, updateitem)}>\n//                     Update\n//                   </button> \n//       </div>\n//       :null} */}\n//           </div>\n//         )})\n//         }\n//       </ul>\n\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","App","newItem","setNewItem","items","setItems","showEdit","setShowEdit","updatedText","setUpdatedText","addItem","alert","item","id","Math","floor","random","value","oldList","deleteItem","newArray","filter","editItem","newText","currentItem","e","target","map"],"sources":["E:/React_data/React_pratice/todoapp/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  // State Hook - `useState`\n  const [newItem, setNewItem] = useState(\"\");\n  const [items, setItems] = useState([]);\n\n  const [showEdit, setShowEdit] = useState(-1);\n  const [updatedText, setUpdatedText] = useState(\"\");\n\n  // Helper Functions\n\n  /* Adds a new item to the list array*/\n  function addItem() {\n    // ! Check for empty item\n    if (!newItem) {\n      alert(\"Press enter an item.\");\n      return;\n    }\n\n    const item = {\n      id: Math.floor(Math.random() * 1000),\n      value: newItem,\n    };\n\n    // Add new item to items array\n    setItems((oldList) => [...oldList, item]);\n\n    // Reset newItem back to original state\n    setNewItem(\"\");\n  }\n\n  /* Deletes an item based on the `item.id` key */\n  function deleteItem(id) {\n    const newArray = items.filter((item) => item.id !== id);\n    setItems(newArray);\n  }\n\n  /* Edit an item text after creating it. */\n  function editItem(id, newText) {\n    // Get the current item\n    const currentItem = items.filter((item) => item.id === id);\n\n    // Create a new item with same id\n    const newItem = {\n      id: currentItem.id,\n      value: newText,\n    };\n\n    deleteItem(id);\n\n    // Replace item in the item list\n    setItems((oldList) => [...oldList, newItem]);\n   \n    setShowEdit(-1);\n  }\n\n  // Main part of app\n  return (\n    <div className=\"app\">\n      {/* 1. Header  */}\n      <h1>My Todo List</h1>\n\n      {/* 2. Add new item (input) */}\n      <input\n        type=\"text\"\n        placeholder=\"Add an item...\"\n        value={newItem}\n        onChange={(e) => setNewItem(e.target.value)}\n      />\n\n      {/* Add (button) */}\n      <button onClick={() => addItem()}>Add</button>\n\n      {/* 3. List of todos (unordered list) */}\n      <ul>\n        {items.map((item) => {\n          return (\n            <div>\n              <li key={item.id} onClick={() => setShowEdit(item.id)}>\n                {item.value}\n                <button\n                  className=\"delete-button\"\n                  onClick={() => deleteItem(item.id)}\n                >\n                  ‚ùå\n                </button>\n              </li>\n\n              {showEdit == item.id ? (\n                <div>\n                  <input\n                    type=\"text\"\n                    value={updatedText}\n                    onChange={(e) => setUpdatedText(e.target.value)}\n                  />\n                  <button onClick={() => editItem(item.id, updatedText)}>\n                    Update\n                  </button>\n                </div>\n              ) : null}\n            </div>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n// import React,{ useState } from \"react\";\n// import \"./App.css\";\n\n// function App() {\n\n\n//   //state -Hooks usestate\n//   const [newItem, setNewItem] = useState(\"\");\n//   const [items, setItems] = useState([]);\n//   //update\n//   const [updateitem, setUpdateItem] = useState(\"\");\n//   const [editShow, setShowEdit] = useState(-1);\n\n//   const handleChange = (e) => {\n//     const value = e.target.value;\n//     setNewItem(value);\n//   };\n\n//   //edit\n//   const edit=(id,newText)=>{\n//     const current=items.filter((item)=>item.id===id);\n//     const item={\n// id:current.id,\n// value:newText,\n//     }\n// deleteItem(id);\n\n// setItems((oldItem)=>[...oldItem,item]);\n// setUpdateItem(\"\");\n// setShowEdit(-1);\n//   }\n\n//   //helper function\n//   const addset = () => {\n//     if (!newItem) {\n//       alert(\"Enter an Item.\");\n//       return;\n//     }\n//     const item = {\n//       id: Math.floor(Math.random() * 1000),\n//       value: newItem,\n//     };\n//     setItems((oldItem) => [...oldItem, item]);\n\n//     setNewItem(\"\");\n//   };\n//   /// Enter key through submit \n//   const keySubmit = (e) => {\n//     if (e.key === \"Enter\") {\n//       addset();\n//     }\n//   };\n\n\n//   ///Delete function\n//   const deleteItem = (id) => {\n//     const NewArray = items.filter((item) => item.id !== id);\n//     setItems(NewArray);\n//   };\n//   return (\n//     <div className=\"App\">\n//       {/* Header */}\n//       <h1>Todo List App</h1>\n//       {/* Input Field */}\n//       {editShow===-1?<div><input\n//       type=\"text\"\n//       name=\"name\"\n//       id=\"txtfield\"\n//       onKeyPress={keySubmit}\n//       onChange={handleChange}\n//       placeholder=\"Add an item..\"\n//       value={newItem || \"\"}\n//     ></input>\n//     <button onClick={(e) => addset()}>Add</button>\n//     </div>:\n// console.log(updateitem)\n//       //  <div>\n\n//       //  <input type=\"text\" \n//       //  value={updateitem}\n//       //  onChange={(e)=>setUpdateItem(e.target.value)}\n       \n//       //  ></input>\n//       //  <button onClick={() => edit(items.id, updateitem)}>\n//       //               Update\n//       //             </button> \n//       // </div>\n      \n            \n      \n      \n//        }\n       \n//       {/* <input\n//         type=\"text\"\n//         name=\"name\"\n//         id=\"txtfield\"\n//         onKeyPress={keySubmit}\n//         onChange={handleChange}\n//         placeholder=\"Add an item..\"\n//         value={newItem || \"\"}\n//       ></input>\n\n//       <button onClick={(e) => addset()}>Add</button> */}\n//       {/* Unordered List */}\n      \n//       <ul>\n      \n//         {\n//         items.map((item) => {\n//         return(  \n//             <div>\n//             <li key={item.id} >\n//             {item.value}\n//             <button className=\"btn-del\" onClick={() => setShowEdit(item.id)}>\n//             üìò\n//             </button> \n//             <button className=\"btn-del\" onClick={() => deleteItem(item.id)}>\n//               ‚ùå\n//             </button>\n//           </li>\n//           {/* {editShow===item.id ?\n//       <div>\n//        <input type=\"text\" \n//        value={updateitem}\n//        onChange={(e)=>setUpdateItem(e.target.value)}\n       \n//        ></input>\n//        <button onClick={() => edit(item.id, updateitem)}>\n//                     Update\n//                   </button> \n//       </div>\n//       :null} */}\n//           </div>\n//         )})\n//         }\n//       </ul>\n      \n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}